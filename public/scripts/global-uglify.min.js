"use strict";(function(){var app=angular.module("seed",["pascalprecht.translate","ui.router","myApp.filters","myApp.services","myApp.directives","myApp.controllers"]);app.config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push("httpErrorHandle");$httpProvider.interceptors.push("tokenInjector")}]);app.config(["$locationProvider",function($locationProvider){$locationProvider.html5Mode(true);$locationProvider.hashPrefix("!")}]);app.run(["$rootScope","authService",function($rootScope,authService){$rootScope.authService=authService;$rootScope.$watch("authService",function(newValue,oldValue){})}]);app.config(["$translateProvider","$translatePartialLoaderProvider",function($translateProvider,$translatePartialLoaderProvider){$translateProvider.useLoader("$translatePartialLoader",{urlTemplate:"/i18n/{part}-{lang}.json"}).preferredLanguage("en").fallbackLanguage("en")}]);function loadTranslate(loader,name){var nameArr=name.split(".");nameArr.shift();while(nameArr.length){var part=nameArr.join("/");loader.addPart(part);nameArr.pop()}}app.run(["$rootScope","$translatePartialLoader","$translate",function($rootScope,$translatePartialLoader,$translate){$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){loadTranslate($translatePartialLoader,toState.name)});$rootScope.$on("$translatePartialLoaderStructureChanged",function(){$translate.refresh()})}]);app.run(["$rootScope","authService",function($rootScope,authService){$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){if(toState.requireAuth&&!authService.isAuth){toState.templateUrl="views/special/403.html"}})}]);app.config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$stateProvider.state("root",{url:"",views:{alert:{templateUrl:"views/alert.html"},header:{templateUrl:"views/header.html"},container:{"abstract":true,template:"<ui-view />"},footer:{templateUrl:"views/footer.html"}}}).state("root.general",{"abstract":true,template:"<ui-view />"}).state("root.general.home",{url:"/",templateUrl:"views/general/home.html"}).state("root.general.contact",{url:"/contact",templateUrl:"views/general/contact.html"}).state("root.general.faq",{url:"/faq",templateUrl:"views/general/faq.html"}).state("root.policies",{url:"/policies",templateUrl:"views/general/policies/index.html"}).state("root.policies.pricing",{url:"/pricing",templateUrl:"views/general/policies/pricing.html"}).state("root.policies.support",{url:"/support",templateUrl:"views/general/policies/support.html"}).state("root.policies.security",{url:"/security",templateUrl:"views/general/policies/security.html"}).state("root.policies.terms",{url:"/terms",templateUrl:"views/general/policies/terms.html"}).state("root.policies.privacy",{url:"/privacy",templateUrl:"views/general/policies/privacy.html"}).state("root.about",{url:"/about",templateUrl:"views/general/about/index.html"}).state("root.about.company",{url:"/company",templateUrl:"views/general/about/company.html"}).state("root.about.team",{url:"/team",templateUrl:"views/general/about/team.html"}).state("root.about.service",{url:"/service",templateUrl:"views/general/about/service.html"}).state("root.user",{"abstract":true,template:"<ui-view />"}).state("root.user.new",{url:"/user/new",templateUrl:"views/user/new.html",controller:"userNewCtrl"}).state("root.user.login",{url:"/user/login",templateUrl:"views/user/login.html",controller:"userLoginCtrl"}).state("root.user.logout",{url:"/user/logout",controller:"userLogoutCtrl"}).state("root.user.reverify",{url:"/user/reverify",templateUrl:"views/user/reverify.html",controller:"userReverifyCtrl"}).state("root.user.recovery",{url:"/user/recovery",templateUrl:"views/user/recovery.html",controller:"userRecoveryCtrl"}).state("root.special",{"abstract":true,views:{"container@":{template:"<ui-view />"},"footer@":{template:""}}}).state("root.special.403",{url:"/403",templateUrl:"views/special/403.html"}).state("root.special.404",{url:"/404",templateUrl:"views/special/404.html"});$urlRouterProvider.otherwise("/404")}])})();"use strict";(function(){var app=angular.module("myApp.controllers",[]);app.controller("rootCtrl",["$scope","$location","alertService","authService","status","$translatePartialLoader",function($scope,$location,alertService,authService,status,$translatePartialLoader){if($location.search().data){var res=JSON.parse(atob($location.search().data));console.log(res);$location.path(res.path);switch(res.code){case status.ERR_RE_VERIFICATION:{alertService.addMessage(0,"Verification",res.message);break}case status.RECOVERY_TOKEN_EXPIRATION:{alertService.addMessage(0,"Recovery",res.message);break}case status.SUCC_RESET:{if(authService.isAuth){$location.path("/user/logout")}alertService.addMessage(0,"Recovery",res.message);break}case status.TOKEN_EXPIRATION:{if(!authService.isAuth){alertService.addMessage(0,"Verification","Token has expired. Just login and you can resend verification mail")}else{alertService.addMessage(0,"Verification","Token has expired. You can resend verification mail");$location.path("/user/reverify")}break}case status.SUCC_VERIFICATION:{if(!authService.isAuth){alertService.addMessage(0,"Verification",res.message)}else{alertService.addMessage(0,"Verification","Please login again to apply new settings");$location.path("/user/logout")}break}case status.ERR_SOCIAL_LOGIN:{alertService.addMessage(0,"social login",res.message);break}case status.SUCC_SOCIAL_LOGIN:{alertService.addMessage(0,"social login",res.message);authService.login(res.data.user);authService.setToken(res.data.token)}}$location.url($location.path())}$translatePartialLoader.addPart("alert");$translatePartialLoader.addPart("header");$translatePartialLoader.addPart("footer")}]).controller("alertCtrl",["$scope","alertService",function($scope,alertService){$scope.messages=alertService.getMessages();$scope.deleteMessage=alertService.deleteMessage}]).controller("langCtrl",["$scope","$translate",function($scope,$translate){$scope.changeLanguage=function(langKey){$translate.use(langKey)}}]).controller("userNewCtrl",["$scope","userFactory","$location","status","alertService",function($scope,userFactory,$location,status,alertService){$scope.error={isWrongCaptcha:false,msg:""};$scope.form={email:"gocreating@gmail.com",password:"testtest",confirm:"testtest",name:"test",sex:1,birthday:"",phone:"",address:""};$scope.isAgree=true;$scope.resetEmail=function(fm){fm.email.$setValidity("exist",true);fm.email.$setValidity("sending",true)};$scope.submit=function(fm){$scope.form["captcha"]={challenge:$("#recaptcha_challenge_field").val(),response:$("#recaptcha_response_field").val()};userFactory.create($scope.form).success(function(res){console.log(res);switch(res.code){case status.WRONG_CAPTCHA:{$scope.error.isWrongCaptcha=true;$scope.error.msg=res.message;Recaptcha.reload();Recaptcha.focus_response_field();break}case status.ERR_EMAIL_SEND:{$scope.error.msg=res.message;fm.email.$setValidity("sending",false);break}case status.USER_EMAIL_EXIST:{fm.email.$setValidity("exist",false);Recaptcha.reload();break}case status.OK:{alertService.addMessage(res.code,"Registration",res.message);$location.path("/user/login")}}})}}]).controller("userLoginCtrl",["$scope","$rootScope","userFactory","$location","status","authService","alertService",function($scope,$rootScope,userFactory,$location,status,authService,alertService){$scope.error={isLoginFail:false,email:{isInvalid:false},password:{isInvalid:false},msg:""};$scope.form={email:"gocreating@gmail.com",password:"testtest"};$scope.resetVlidation=function(key){$scope.error[key].isInvalid=false};$scope.submit=function(fm){$scope.error.email.isInvalid=fm.email.$invalid;$scope.error.password.isInvalid=fm.password.$invalid;if(fm.$valid){userFactory.login($scope.form).success(function(res){switch(res.code){case status.USER_WRONG_ACCOUNT:case status.USER_NOT_VERIFIED:{$scope.error.isLoginFail=true;$scope.error.msg=res.message;$scope.form.password="";break}case status.OK:{console.log("login");alertService.addMessage(res.code,"Login",res.message);authService.login(res.data.user);authService.setToken(res.data.token);$location.path("/")}}})}}}]).controller("userLogoutCtrl",["$scope","userFactory","$location","status","authService","alertService",function($scope,userFactory,$location,status,authService,alertService){userFactory.logout().success(function(res){switch(res.code){case status.OK:{console.log("logout");alertService.addMessage(res.code,"Logout",res.message);authService.logout();$location.path("/user/login")}}})}]).controller("userReverifyCtrl",["$scope","userFactory","status","alertService",function($scope,userFactory,status,alertService){$scope.error={isWrongCaptcha:false,msg:""};$scope.form={};$scope.submit=function(){$scope.form["captcha"]={challenge:$("#recaptcha_challenge_field").val(),response:$("#recaptcha_response_field").val()};userFactory.reverify($scope.form).success(function(res){switch(res.code){case status.WRONG_CAPTCHA:{$scope.error.isWrongCaptcha=true;$scope.error.msg=res.message;Recaptcha.reload();Recaptcha.focus_response_field();break}case status.ERR_EMAIL_SEND:{Recaptcha.reload();Recaptcha.focus_response_field();alertService.addMessage(res.code,"Verification",res.message);break}case status.OK:{$("#recaptcha_challenge_field").val("");alertService.addMessage(res.code,"Verification",res.message)}}})}}]).controller("userRecoveryCtrl",["$scope","userFactory","alertService","status",function($scope,userFactory,alertService,status){$scope.error={isWrongCaptcha:false,msg:""};$scope.form={email:"gocreating@gmail.com"};$scope.resetEmail=function(fm){fm.email.$setValidity("notexist",true);fm.email.$setValidity("sending",true)};$scope.submit=function(fm){$scope.form["captcha"]={challenge:$("#recaptcha_challenge_field").val(),response:$("#recaptcha_response_field").val()};userFactory.recover($scope.form).success(function(res){switch(res.code){case status.WRONG_CAPTCHA:{$scope.error.isWrongCaptcha=true;$scope.error.msg=res.message;Recaptcha.reload();Recaptcha.focus_response_field();break}case status.ERR_EMAIL_SEND:{$scope.error.msg=res.message;Recaptcha.reload();alertService.addMessage(res.code,"Recovery",res.message);fm.email.$setValidity("sending",false);break}case status.USER_EMAIL_NOT_EXIST:{fm.email.$setValidity("notexist",false);Recaptcha.reload();break}case status.OK:{$("#recaptcha_challenge_field").val("");alertService.addMessage(res.code,"Recovery",res.message)}}})}}])})();"use strict";(function(){var app=angular.module("myApp.directives",[]);app.directive("appVersion",["version",function(version){return function(scope,elm,attrs){elm.text(version)}}])})();"use strict";(function(){var app=angular.module("myApp.filters",[]);app.filter("interpolate",["version",function(version){return function(text){return String(text).replace(/\%VERSION\%/gm,version)}}])})();"use strict";(function(){var app=angular.module("myApp.services",[]);var status={OK:200,INTERNAL_SERVER_ERROR:500,ERR_VALIDATION:268435458,USER_EMAIL_EXIST:268435459,USER_WRONG_ACCOUNT:268435460,TOKEN_WRONG_FORMAT:268435461,TOKEN_EXPIRATION:268435462,SUCC_SOCIAL_LOGIN:7,ERR_SOCIAL_LOGIN:268435464,WRONG_CAPTCHA:268435465,USER_NOT_VERIFIED:268435466,ERR_EMAIL_SEND:268435467,SUCC_VERIFICATION:12,ERR_RE_VERIFICATION:13,USER_EMAIL_NOT_EXIST:268435470,RECOVERY_TOKEN_EXPIRATION:268435471,SUCC_RESET:16};app.constant("status",status);app.factory("httpErrorHandle",["$q","alertService",function($q,alertService){return{response:function(config){var res=config.data;switch(res.code){case status.ERR_VALIDATION:{var errMsg="";var inputs=res.data;for(var i in inputs){errMsg+=inputs[i].field+"\n";errMsg+="=====================\n";var msgs=inputs[i].msg;for(var j in msgs){errMsg+=msgs[j]+"\n"}errMsg+="\n"}alertService.addMessage(res.code,"Server-side validation error",errMsg);break}}return config},responseError:function(config){if(config.status==500){alertService.addMessage(null,"Error","Internal server error")}return $q.reject(config)}}}]).factory("tokenInjector",["authService",function(authService){return{request:function(config){var token=authService.getToken();if(config.url.substr(0,4)==="/api"&&token){config.headers["x-access-token"]=token}return config}}}]).factory("alertService",[function(){var messages=[];return{getMessages:function(){return messages},addMessage:function(type,title,content){messages.push({type:type,title:title,content:content})},deleteMessage:function(idx){messages.splice(idx,1)}}}]).factory("authService",["$window",function($window){var store={};store.isAuth=$window.localStorage.getItem("isAuth");store.user=JSON.parse($window.localStorage.getItem("user"));store.token=$window.localStorage.getItem("token");store.setToken=function(token){return $window.localStorage.setItem("token",token)};store.getToken=function(){return $window.localStorage.getItem("token")};store.login=function(user){$window.localStorage.setItem("isAuth",true);$window.localStorage.setItem("user",JSON.stringify(user));store.isAuth=true;store.user=user};store.logout=function(){$window.localStorage.removeItem("isAuth");$window.localStorage.removeItem("user");$window.localStorage.removeItem("token");store.isAuth=false;store.user=null};return store}]).factory("userFactory",["$http",function($http){var urlBase="/api/user";var fac={};fac.readAll=function(){return $http.get(urlBase)};fac.read=function(id){return $http.get(urlBase+"/"+id)};fac.create=function(user){return $http.post(urlBase,user)};fac.login=function(user){return $http.post(urlBase+"/login",user)};fac.logout=function(){return $http.get(urlBase+"/logout")};fac.reverify=function(data){return $http.post(urlBase+"/reverify",data)};fac.recover=function(data){return $http.post(urlBase+"/password/recovery",data)};fac.update=function(user){return $http.put(urlBase+"/"+user.user_id,user)};fac.delete=function(id){return $http.delete(urlBase+"/"+id)};return fac}])})();